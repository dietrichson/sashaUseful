verbatimTextOutput("dataInfo")
),
server = function(input, output) {
# reactiveValues object for storing current data set.
vals <- reactiveValues(data = NULL)
# Return the UI for a modal dialog with data selection input. If 'failed' is
# TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("dataset", "Choose data set",
placeholder = 'Try "mtcars" or "abc"'
),
span('(Try the name of a valid data object like "mtcars", ',
'then a name of a non-existent object like "abc")'),
if (failed)
div(tags$b("Invalid name of data object", style = "color: red;")),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK")
)
}
# Show modal when button is clicked.
observeEvent(input$show, {
showModal(dataModal())
})
# When OK button is pressed, attempt to load the data set. If successful,
# remove the modal. If not show another modal, but this time with a failure
# message.
observeEvent(input$ok, {
# Check that data object exists and is data frame.
if (!is.null(input$dataset) && nzchar(input$dataset) &&
exists(input$dataset) && is.data.frame(get(input$dataset))) {
vals$data <- get(input$dataset)
removeModal()
} else {
showModal(dataModal(failed = TRUE))
}
})
# Display information about selected data
output$dataInfo <- renderPrint({
if (is.null(vals$data))
"No data selected"
else
summary(vals$data)
})
}
)
}
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
title = "Somewhat important message",
"This is a somewhat important message.",
easyClose = TRUE,
footer = NULL
))
})
}
)
library(shiny)
if (interactive()) {
# Display an important message that can be dismissed only by clicking the
# dismiss button.
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
title = "Important message",
"This is an important message!"
))
})
}
)
# Display a message that can be dismissed by clicking outside the modal dialog,
# or by pressing Esc.
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
title = "Somewhat important message",
"This is a somewhat important message.",
easyClose = TRUE,
footer = NULL
))
})
}
)
# Display a modal that requires valid input before continuing.
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog"),
verbatimTextOutput("dataInfo")
),
server = function(input, output) {
# reactiveValues object for storing current data set.
vals <- reactiveValues(data = NULL)
# Return the UI for a modal dialog with data selection input. If 'failed' is
# TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("dataset", "Choose data set",
placeholder = 'Try "mtcars" or "abc"'
),
span('(Try the name of a valid data object like "mtcars", ',
'then a name of a non-existent object like "abc")'),
if (failed)
div(tags$b("Invalid name of data object", style = "color: red;")),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK")
)
}
# Show modal when button is clicked.
observeEvent(input$show, {
showModal(dataModal())
})
# When OK button is pressed, attempt to load the data set. If successful,
# remove the modal. If not show another modal, but this time with a failure
# message.
observeEvent(input$ok, {
# Check that data object exists and is data frame.
if (!is.null(input$dataset) && nzchar(input$dataset) &&
exists(input$dataset) && is.data.frame(get(input$dataset))) {
vals$data <- get(input$dataset)
removeModal()
} else {
showModal(dataModal(failed = TRUE))
}
})
# Display information about selected data
output$dataInfo <- renderPrint({
if (is.null(vals$data))
"No data selected"
else
summary(vals$data)
})
}
)
}
x = rnorm(1000);
# overlay histogram, empirical density and normal density
p0 = qplot(x, geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density') +
stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..), alpha = 0.4) +
scale_colour_manual(name = 'Density', values = c('red', 'blue')) +
theme(legend.position = c(0.85, 0.85))
library(ggplot2)
x = rnorm(1000);
# overlay histogram, empirical density and normal density
p0 = qplot(x, geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density') +
stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..), alpha = 0.4) +
scale_colour_manual(name = 'Density', values = c('red', 'blue')) +
theme(legend.position = c(0.85, 0.85))
p0
p0+scale_y_continuous(labels = 1:5)
p0+scale_y_continuous(breaks=0:4labels = 1:5)
p0+scale_y_continuous(breaks=0:4,labels = 1:5)
p0
p0+scale_y_continuous(labels = breaks())
p0+scale_y_continuous(labels = breaks)
help("scale_y_continuous")
p0+scale_y_continuous(labels = function(x)x*2)
p0+scale_y_continuous(labels = function(x)x*10)
myData <- data.frame(x)
variable=x
myData %>%
ggplot(aes_string(paste0("x=",variable)))+
geom_histogram(color="red",fill='red',alpha=.4,binwidth = binwidth )+
geom_density(aes(y=..density..*binwidth*..n..),color="blue",lty=2)
library(dplyr)
myData %>%
ggplot(aes_string(paste0("x=",variable)))+
geom_histogram(color="red",fill='red',alpha=.4,binwidth = binwidth )+
geom_density(aes(y=..density..*binwidth*..n..),color="blue",lty=2)
myData %>%
ggplot(aes_string(paste0("x=",variable)))+
geom_histogram(color="red",fill='red',alpha=.4,binwidth = binwidth )+
geom_density(aes(y=..density..,..n..),color="blue",lty=2)
myData %>%
ggplot(aes_string(paste0("x=",variable)))
myData %>%
ggplot(aes_string(paste0("x=",variable)))+
geom_line(aes(y = ..density.., colour = 'Empirical')
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density') +
stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..), alpha = 0.4) +
scale_colour_manual(name = 'Density', values = c('red', 'blue')) +
theme(legend.position = c(0.85, 0.85))
}
myData %>%
ggplot(aes_string(paste0("x=",variable)))+
geom_line(aes(y = ..density.., colour = 'Empirical')
)
myData %>%
ggplot(aes_string(paste0("x=",variable)))+
geom_line(aes(y = ..density.., colour = 'Empirical'))
myData %>%
ggplot(aes_string(paste0("x=",variable)))+
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density')
myData %>%
ggplot(aes_string(paste0("x=",variable)))+
geom_line(aes(y = ..density..), stat = 'density')
myData %>%
ggplot(aes_string(paste0("x=",variable)))+
geom_line(aes(y = ..density..), stat = 'density',color='blue')
myData %>%
ggplot(aes_string(paste0("x=",variable)))+
geom_line(aes(y = ..density..), stat = 'density',color='blue')+
geom_histogram(aes(y = ..density..), alpha = 0.4)
myData %>%
ggplot(aes_string(paste0("x=",variable)))+
#geom_line(aes(y = ..density..), stat = 'density',color='blue')+
geom_histogram(aes(y = ..density..), alpha = 0.4)
myData
qplot(myData[[variable]], geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density') +
stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..), alpha = 0.4) +
scale_colour_manual(name = 'Density', values = c('red', 'blue')) +
theme(legend.position = c(0.85, 0.85))
qplot(myData[[variable]], geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density') +
stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..), alpha = 0.4) +
scale_colour_manual(name = 'Density', values = c('red', 'blue')) +
theme(legend.position = c(0.85, 0.85))
qplot(myData[[variable]]
)
myData[[variable]]
myData[variable]
variable
myData
mydata$x
myData$x
myData[variable]
variable
variable <- x
variable <- "x"
myData[variable]
qplot(myData[variable], geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density') +
stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..), alpha = 0.4) +
scale_colour_manual(name = 'Density', values = c('red', 'blue')) +
theme(legend.position = c(0.85, 0.85))
qplot(myData[variable], geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density') +
stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..), alpha = 0.4)
qplot(myData[variable], geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density',color='red') +
#stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..), alpha = 0.4)
qplot(myData[variable], geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density',color='red') +
#stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..), alpha = 0.4)
qplot(myData[variable], geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density',color='red') +
#stat_function(fun = dnorm, aes(colour = 'Normal')) +
#geom_histogram(aes(y = ..density..)) +
geom_histogram(aes(y = ..count..), alpha = 0.4) +
scale_y_continuous()
qplot(myData[variable], geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density',color='red') +
#stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..)) +
#geom_histogram(aes(y = ..count..), alpha = 0.4) +
scale_y_continuous()
qplot(myData[variable], geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density',color='red') +
#stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..)) +
#geom_histogram(aes(y = ..count..), alpha = 0.4) +
scale_y_continuous(labels=function(x){x*binwidth*nrow(myData)})
binwidth=.1
qplot(myData[variable], geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density',color='red') +
#stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..),binwidth = binwidth) +
#geom_histogram(aes(y = ..count..), alpha = 0.4) +
scale_y_continuous(labels=function(x){x*binwidth*nrow(myData)})
binwidth=1
qplot(myData[variable], geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density',color='red') +
#stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..),binwidth = binwidth) +
#geom_histogram(aes(y = ..count..), alpha = 0.4) +
scale_y_continuous(labels=function(x){x*binwidth*nrow(myData)})
p0
range(x)
max(x)-min(x)
max(x)-min(x)/30
max(x)-min(x)/30 ->binwidth
qplot(myData[variable], geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density',color='red') +
#stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..),binwidth = binwidth) +
#geom_histogram(aes(y = ..count..), alpha = 0.4) +
scale_y_continuous(labels=function(x){x*binwidth*nrow(myData)})
qplot(myData[variable], geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density',color='red') +
#stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..),binwidth = binwidth) +
#geom_histogram(aes(y = ..count..), alpha = 0.4) +
scale_y_continuous(labels=function(x){x*binwidth*30})
qplot(myData[variable], geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density',color='red') +
#stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..),binwidth = binwidth) +
#geom_histogram(aes(y = ..count..), alpha = 0.4) +
scale_y_continuous(labels=function(x){x*binwidth*..count..})
qplot(myData[variable], geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density',color='red') +
#stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..),binwidth = binwidth) +
#geom_histogram(aes(y = ..count..), alpha = 0.4) +
scale_y_continuous(labels=function(x){x*binwidth*10})
qplot(myData[variable], geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density',color='red') +
#stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..),binwidth = binwidth) +
#geom_histogram(aes(y = ..count..), alpha = 0.4) +
scale_y_continuous(labels=function(x){x*binwidth})
qplot(myData[variable], geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density',color='red') +
#stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..),binwidth = binwidth) +
#geom_histogram(aes(y = ..count..), alpha = 0.4) +
#scale_y_continuous(labels=function(x){x*binwidth})
}
qplot(myData[variable], geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density',color='red') +
geom_histogram(aes(y = ..density..),binwidth = binwidth)
binwidth
qplot(myData[variable], geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density',color='red') +
geom_histogram(aes(y = ..density..))
qplot(myData[variable], geom = 'blank') +
geom_histogram(aes(y = ..density..)) +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density',color='blue')
qplot(myData[variable], geom = 'blank') +
geom_histogram(aes(y = 10*..count..)) +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density',color='blue')
library(sashaUseful)
help(connectToDatacenter)
library(sashaUseful)
?connectToDatabase
getHistogramWithDensityLine <- function(myData,binwidth=.1,variable="x"){ #TODO: Move to package
myData %>%
ggplot(aes_string(paste0("x=",variable))) +
geom_histogram(color="red",fill='red',alpha=.4,binwidth = binwidth )+
geom_density(aes(y=..density..*binwidth*..n..),color="blue",lty=2)
}
myData <- readRDS("~/Desktop/debug_readiness.RDS")
getHistogramWithDensityLine(myData,variable="courseReadiness")
library(dplyr)
getHistogramWithDensityLine(myData,variable="courseReadiness")
library(ggplot2)
getHistogramWithDensityLine(myData,variable="courseReadiness")
getHistogramWithDensityLine2(myData,variable="courseReadiness")
getHistogramWithDensityLine2 <- function(myData,binwidth=.1,variable="x"){
qplot(myData[variable], geom = 'blank') +
geom_histogram(aes(y = ..density..)) +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density',color='blue')
#+
#geom_histogram(aes(y = ..count..), alpha = 0.4) +
#scale_y_continuous(labels=function(x){x*binwidth})
}
getHistogramWithDensityLine2(myData,variable="courseReadiness")
packageVersion("ggplot2")
devtools::install_github("agoldst/scuro")
"%nin%" <- function(x, table) match(x, table, nomatch = 0) == 0
c("a","b","c") %nin% c("a")
library(sashaUseful)
benchmark({a=rnorm(100)})
help("replicate")
c(min = min(times), max = max(times), mean = mean(times), median = median(times))
#' Quick Benchmarking
#'
#' @param ... Code to be benchmarked
#' @param n number of times to run the simulation
#'
#' @return Named vector of mininimum, averages and maximum
#' @export
benchmark <- function(..., n = 100) {
times <- replicate(n,time(...))
c(min = min(times), max = max(times), mean = mean(times), median = median(times))
}
benchmark({a=rnorm(100)})
source('~/sashaUseful/R/benchmark.R')
benchmark({a=rnorm(100)})
source('~/sashaUseful/R/benchmark.R')
library(sashaUseful)
rm(benchmark())
rm(benchmark)
test <- benchmark(rnorm(100))
test
print(test)
test*1000
source('~/sashaUseful/R/benchmark.R')
library(sashaUseful)
test <- benchmark(rnorm(100))
test
test <- benchmark(rnorm(10000))
test
system.time(rnorm(100))
source('~/sashaUseful/R/benchmark.R')
library(sashaUseful)
test <- benchmark(rnorm(10000))
system.time(rnorm(100))->test
test
names(test)
sum(test)
source('~/sashaUseful/R/benchmark.R')
library(sashaUseful)
test <- benchmark(rnorm(10000))
test
system.tim(rnorm(10000))
system.time(rnorm(10000))
times <- replicate(n,
sum(
system.time(eval(rnorm(1000000)))
)
n=1-
0
n=10
times <- replicate(n,
sum(
system.time(eval(rnorm(1000000)))
)
times
c(min = min(times), max = max(times), mean = mean(times))
benchmark(rnorm(1000000))
options(digits)
options("digits")
options("scipen")
options("scipen"=-100)
test
options("scipen"=100)
test
options("scipen"=100,digits=4)
test
test <- benchmark(rnorm(1000000))
test
options("scipen"=10,digits=4)
test
options("scipen"=0,digits=4)
test
options("scipen"=3,digits=4)
test
source('~/sashaUseful/R/benchmark.R')
library(sashaUseful)
source('~/sashaUseful/R/benchmark.R')
n
times <- replicate(n,
sum(
system.time(eval("Sys.sleep(25)"))
)
times
times <- replicate(n,
sum(
system.time(eval("Sys.sleep(1000)"))
)
times
times <- replicate(n,
sum(
system.time(eval(Sys.sleep(1000)))
)
times <- replicate(n,
sum(
system.time(eval(Sys.sleep(1)))
)
times
c(min = min(times), max = max(times), mean = mean(times))
benchmark(Sys.sleep(1),5)
source('~/sashaUseful/R/benchmark.R')
times
benchmark(Sys.sleep(1),5)
benchmark({Sys.sleep(1)},5)
source('~/sashaUseful/R/benchmark.R')
benchmark({Sys.sleep(1)},5)
source('~/sashaUseful/R/benchmark.R')
benchmark({Sys.sleep(1)},5)
source('~/sashaUseful/R/benchmark.R')
benchmark({Sys.sleep(1)},5)
help(eval)
source('~/sashaUseful/R/benchmark.R')
benchmark({Sys.sleep(1)},5)
system.time(a=1) ->tmp2
system.time({a=1}) ->tmp2
names(tmp2)
source('~/sashaUseful/R/benchmark.R')
benchmark({Sys.sleep(1)},5)
source('~/sashaUseful/R/benchmark.R')
benchmark({Sys.sleep(1)},5)
source('~/sashaUseful/R/benchmark.R')
benchmark({Sys.sleep(1)},5)
library(sashaUseful)
